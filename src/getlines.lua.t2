;;; ntangle-inc
;; implement
function HL:getlines(hl_elem, lnum, lines, prefix)
	local prefix = prefix or ""
	while hl_elem and lnum > 0 do
		if hl_elem.type == HL_ELEM_TYPE.SECTION_PART then
			; go up stack and get next
		elseif hl_elem.type == HL_ELEM_TYPE.REFERENCE then
			; go down stack and get next
		elseif hl_elem.type == HL_ELEM_TYPE.TEXT then
			; append text to lines
		end
		hl_elem = hl_elem.next
	end
	return lnum
end

;; go up stack and get next
return lnum

;; go down stack and get next
local section = self.sections[hl_elem.name]
if section then
	local part = section.parts.head
	while part and lnum > 0 do
		lnum = self:getlines(part.lines.head, lnum, lines, prefix .. hl_elem.prefix)
		part = part.next
	end
end

;; append text to lines
table.insert(lines, prefix .. hl_elem.ll_elem.str)
lnum = lnum - 1

;; implement
function HL:getlines_next(hl_elem, lines, prefix)
	local prefix = prefix or ""

	while hl_elem do
		if hl_elem.type == HL_ELEM_TYPE.SECTION_PART then
			break
		elseif hl_elem.type == HL_ELEM_TYPE.FILLER then
			break
		elseif hl_elem.type == HL_ELEM_TYPE.REFERENCE then
			; go down stack and get next all
		elseif hl_elem.type == HL_ELEM_TYPE.TEXT then
			; append text to lines_all
		end
		hl_elem = hl_elem.next
	end
end

;; append text to lines_all
table.insert(lines, prefix .. hl_elem.ll_elem.str)

;; go down stack and get next all
local section = self.sections[hl_elem.name]
if section then
	local part = section.parts.head
	while part  do
		self:getlines_next(part.lines.head, lines, prefix .. hl_elem.prefix)
		part = part.next
	end
end

;; implement
function HL:getlines_all(hl_elem)
	local lines = {}
	local prefix = ""
	if hl_elem.type == HL_ELEM_TYPE.SECTION_PART then
		self:getlines_next(hl_elem.section.head, lines)
	elseif hl_elem.type == HL_ELEM_TYPE.REFERENCE then
		; go down stack and get next all
	elseif hl_elem.type == HL_ELEM_TYPE.TEXT then
		local prefix = ""
		; append text to lines_all
	else
		assert(false)
	end
	return lines
end


